{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/Users/kenta/Documents/react/brand-quiz-app/pages/Main.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from \"react\";\nimport firebase from \"../firebase\";\nimport { db } from \"../src/firebase\"; // import EmailLogin from \"./emailLogin\";\n// import EmailSubmit from \"./EmailSubmit\";\n\nimport Quiz from \"./Quiz\";\nimport Header from \"./Header\";\nimport Buttons from \"./Buttons\";\n\nconst Main = () => {\n  _s();\n\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loginEmail: \"\",\n    loginPassword: \"\",\n    email: \"\",\n    password: \"\",\n    isUserEmpty: true,\n    quiz: [],\n    count: 0,\n    answer: false,\n    correct: false,\n    answerNumber: 100\n  });\n  useEffect(() => {\n    // firebase.auth().onAuthStateChanged(function (user) {\n    //   if (user) {\n    //     console.log(\"trueです！\");\n    //     setState({\n    //       ...state,\n    //       isUserEmpty: false,\n    //     });\n    //   }\n    //   console.log(\"useEffect実行中\");\n    // });\n    let list = [];\n    db.collection(\"quiz\").get().then(querySnapshot => {\n      querySnapshot.forEach(doc => {\n        const new_hash = {\n          text: doc.data().text,\n          choice1: doc.data().choice1,\n          choice2: doc.data().choice2,\n          choice3: doc.data().choice3,\n          choice4: doc.data().choice4,\n          answer: doc.data().answer\n        };\n        list.push(new_hash);\n      });\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        quiz: list\n      }));\n    });\n  }, []); // const handleSubmit = () => {\n  //   const email = \"kentateacher@gmail.com\";\n  //   const password = \"dfasdfadsfa\";\n  //   console.log(email);\n  //   console.log(password);\n  //   signUp(email, password);\n  // };\n  // const handleLogin = () => {\n  //   const email = \"kentateacher@gmail.com\";\n  //   const password = \"dfasdfadsfa\";\n  //   firebase\n  //     .auth()\n  //     .signInWithEmailAndPassword(email, password)\n  //     .catch(function (error) {});\n  //   setState({\n  //     isUserEmpty: false,\n  //   });\n  // };\n\n  const logout = () => {\n    firebase.auth().signOut().then(function () {}).catch(function (error) {});\n  }; // const handleEmailChange = (event) => {\n  //   const inputValue = event.target.value;\n  //   setState({\n  //     email: inputValue,\n  //   });\n  //   console.log(state.email);\n  // };\n  // const handlePasswordChange = (event) => {\n  //   const inputValue = event.target.value;\n  //   setState({\n  //     password: inputValue,\n  //   });\n  //   console.log(state.password);\n  // };\n\n\n  const googleLogin = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n\n    if (state.isUserEmpty) {\n      console.log(\"googleでログインします\");\n      firebase.auth().signInWithPopup(provider).then(function (result) {}).catch(function (error) {});\n    } else {\n      logout();\n    }\n  };\n\n  const nextQuestion = () => {\n    const count = state.count + 1;\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      count: count,\n      answer: false\n    }));\n  };\n\n  const returnQuestion = () => {\n    const count = state.count - 1;\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      count: count\n    }));\n  };\n\n  const showAnswer = (num, answer) => {\n    if (num === answer) {\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        answerNumber: num,\n        correct: true,\n        answer: true\n      }));\n    } else {\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        answerNumber: num,\n        correct: false,\n        answer: true\n      }));\n    }\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 5\n    }\n  }, __jsx(Header, {\n    isUserEmpty: state.isUserEmpty,\n    googleLogin: () => googleLogin(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: \"question mx-auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }\n  }, __jsx(Quiz, {\n    quiz: state.quiz[state.count],\n    showAnswer: (num, quiz) => showAnswer(num, quiz),\n    answer: state.answer,\n    correct: state.correct,\n    answerNumber: state.answerNumber,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }\n  }), __jsx(Buttons, {\n    nextQuestion: (num, quiz) => nextQuestion(),\n    returnQuestion: (num, quiz) => returnQuestion(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }\n  })));\n}; // function signUp(email, password) {\n//   console.log(\"user\", firebase.auth().currentUser);\n//   firebase\n//     .auth()\n//     .createUserWithEmailAndPassword(email, password)\n//     .catch(function (error) {\n//       console.log(error);\n//     });\n// }\n// function signIn(email, password) {\n// }\n\n\n_s(Main, \"fkhQvsU0XN55qftGgn1AmRoCtbY=\");\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/Users/kenta/Documents/react/brand-quiz-app/pages/Main.js"],"names":["React","useEffect","useState","firebase","db","Quiz","Header","Buttons","Main","state","setState","loginEmail","loginPassword","email","password","isUserEmpty","quiz","count","answer","correct","answerNumber","list","collection","get","then","querySnapshot","forEach","doc","new_hash","text","data","choice1","choice2","choice3","choice4","push","logout","auth","signOut","catch","error","googleLogin","provider","GoogleAuthProvider","console","log","signInWithPopup","result","nextQuestion","returnQuestion","showAnswer","num"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport firebase from \"../firebase\";\nimport { db } from \"../src/firebase\";\n// import EmailLogin from \"./emailLogin\";\n// import EmailSubmit from \"./EmailSubmit\";\nimport Quiz from \"./Quiz\";\nimport Header from \"./Header\";\nimport Buttons from \"./Buttons\";\n\nconst Main = () => {\n  const [state, setState] = useState({\n    loginEmail: \"\",\n    loginPassword: \"\",\n    email: \"\",\n    password: \"\",\n    isUserEmpty: true,\n    quiz: [],\n    count:0,\n    answer:false,\n    correct: false,\n    answerNumber: 100,\n  });\n\n  useEffect(() => {\n    // firebase.auth().onAuthStateChanged(function (user) {\n    //   if (user) {\n    //     console.log(\"trueです！\");\n    //     setState({\n    //       ...state,\n    //       isUserEmpty: false,\n    //     });\n    //   }\n    //   console.log(\"useEffect実行中\");\n    // });\n\n    let list = [];\n    db.collection(\"quiz\")\n      .get()\n      .then((querySnapshot) => {\n        querySnapshot.forEach((doc) => {\n          const new_hash = {\n            text: doc.data().text,\n            choice1: doc.data().choice1,\n            choice2: doc.data().choice2,\n            choice3: doc.data().choice3,\n            choice4: doc.data().choice4,\n            answer: doc.data().answer,\n          };\n          list.push(new_hash);\n        });\n        setState({\n          ...state,\n          quiz: list,\n        });\n      });\n  }, []);\n\n  // const handleSubmit = () => {\n  //   const email = \"kentateacher@gmail.com\";\n  //   const password = \"dfasdfadsfa\";\n  //   console.log(email);\n  //   console.log(password);\n  //   signUp(email, password);\n  // };\n\n  // const handleLogin = () => {\n  //   const email = \"kentateacher@gmail.com\";\n  //   const password = \"dfasdfadsfa\";\n  //   firebase\n  //     .auth()\n  //     .signInWithEmailAndPassword(email, password)\n  //     .catch(function (error) {});\n  //   setState({\n  //     isUserEmpty: false,\n  //   });\n  // };\n\n  const logout = () => {\n    firebase\n      .auth()\n      .signOut()\n      .then(function () {})\n      .catch(function (error) {});\n  };\n\n  // const handleEmailChange = (event) => {\n  //   const inputValue = event.target.value;\n  //   setState({\n  //     email: inputValue,\n  //   });\n  //   console.log(state.email);\n  // };\n\n  // const handlePasswordChange = (event) => {\n  //   const inputValue = event.target.value;\n  //   setState({\n  //     password: inputValue,\n  //   });\n  //   console.log(state.password);\n  // };\n\n  const googleLogin = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    if (state.isUserEmpty) {\n      console.log(\"googleでログインします\");\n      firebase\n        .auth()\n        .signInWithPopup(provider)\n        .then(function (result) {})\n        .catch(function (error) {});\n    } else {\n      logout();\n    }\n  };\n\n  const nextQuestion = () => {\n    const count = state.count + 1\n    setState({\n      ...state,\n      count: count,\n      answer:false,\n    })\n  }\n\n  const returnQuestion = () => {\n    const count = state.count - 1\n    setState({\n      ...state,\n      count: count,\n    })\n  }\n\n  const showAnswer = (num,answer) => {\n    if(num===answer){\n      setState({\n        ...state,\n        answerNumber: num,\n        correct: true,\n        answer:true,\n      })\n    }else{\n      setState({\n        ...state,\n        answerNumber: num,\n        correct: false,\n        answer:true,\n      })   \n    }\n  }\n\n  return (\n    <div>\n      {/* <div>\n        <h1>\n          {state.isUserEmpty ? \"ログインして下さい\" : \"ログインしています\"}\n        </h1>\n      </div> */}\n      {/* {state.isUserEmpty && (\n        <React.Fragment>\n          <EmailLogin\n            isUserEmpty={state.isUserEmpty}\n            handleLogin={() => handleLogin()}\n            handleLogout={() => logout()}\n            handleEmailChange={(event) => handleEmailChange(event)}\n          />\n\n          <EmailSubmit\n            isUserEmpty={state.isUserEmpty}\n            handleSubmit={(event) => handleSubmit(event)}\n            handleEmailChange={(event) => handleEmailChange(event)}\n            handlePasswordChange={(event) => handlePasswordChange(event)}\n          />\n        </React.Fragment>\n      )} */}\n      <Header\n        isUserEmpty={state.isUserEmpty}\n        googleLogin={() => googleLogin()}\n      />\n      <div className=\"question mx-auto\">\n        <Quiz \n          quiz={state.quiz[state.count]}\n          showAnswer={(num,quiz)=>showAnswer(num,quiz)}\n          answer={state.answer}\n          correct={state.correct}\n          answerNumber={state.answerNumber}\n        />\n\n        <Buttons\n          nextQuestion = {(num,quiz) => nextQuestion()}\n          returnQuestion = {(num,quiz) => returnQuestion()}\n        />\n      </div>\n\n    </div>\n  );\n};\n\n// function signUp(email, password) {\n//   console.log(\"user\", firebase.auth().currentUser);\n\n//   firebase\n//     .auth()\n//     .createUserWithEmailAndPassword(email, password)\n//     .catch(function (error) {\n//       console.log(error);\n//     });\n// }\n\n// function signIn(email, password) {\n\n// }\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}